// Generated by gencpp from file learning_veddha/GpsInfo.msg
// DO NOT EDIT!


#ifndef LEARNING_VEDDHA_MESSAGE_GPSINFO_H
#define LEARNING_VEDDHA_MESSAGE_GPSINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace learning_veddha
{
template <class ContainerAllocator>
struct GpsInfo_
{
  typedef GpsInfo_<ContainerAllocator> Type;

  GpsInfo_()
    : header()
    , status(0)
    , Vx(0.0)
    , Vy(0.0)
    , Vz(0.0)
    , Vv(0.0)
    , Heading(0.0)
    , Pitch(0.0)
    , Roll(0.0)  {
    }
  GpsInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , status(0)
    , Vx(0.0)
    , Vy(0.0)
    , Vz(0.0)
    , Vv(0.0)
    , Heading(0.0)
    , Pitch(0.0)
    , Roll(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _status_type;
  _status_type status;

   typedef double _Vx_type;
  _Vx_type Vx;

   typedef double _Vy_type;
  _Vy_type Vy;

   typedef double _Vz_type;
  _Vz_type Vz;

   typedef double _Vv_type;
  _Vv_type Vv;

   typedef double _Heading_type;
  _Heading_type Heading;

   typedef double _Pitch_type;
  _Pitch_type Pitch;

   typedef double _Roll_type;
  _Roll_type Roll;





  typedef boost::shared_ptr< ::learning_veddha::GpsInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::learning_veddha::GpsInfo_<ContainerAllocator> const> ConstPtr;

}; // struct GpsInfo_

typedef ::learning_veddha::GpsInfo_<std::allocator<void> > GpsInfo;

typedef boost::shared_ptr< ::learning_veddha::GpsInfo > GpsInfoPtr;
typedef boost::shared_ptr< ::learning_veddha::GpsInfo const> GpsInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::learning_veddha::GpsInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::learning_veddha::GpsInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::learning_veddha::GpsInfo_<ContainerAllocator1> & lhs, const ::learning_veddha::GpsInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.status == rhs.status &&
    lhs.Vx == rhs.Vx &&
    lhs.Vy == rhs.Vy &&
    lhs.Vz == rhs.Vz &&
    lhs.Vv == rhs.Vv &&
    lhs.Heading == rhs.Heading &&
    lhs.Pitch == rhs.Pitch &&
    lhs.Roll == rhs.Roll;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::learning_veddha::GpsInfo_<ContainerAllocator1> & lhs, const ::learning_veddha::GpsInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace learning_veddha

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::learning_veddha::GpsInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::learning_veddha::GpsInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::learning_veddha::GpsInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::learning_veddha::GpsInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learning_veddha::GpsInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learning_veddha::GpsInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::learning_veddha::GpsInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "81490e56783fc6d70c2658a0fe52a3c4";
  }

  static const char* value(const ::learning_veddha::GpsInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x81490e56783fc6d7ULL;
  static const uint64_t static_value2 = 0x0c2658a0fe52a3c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::learning_veddha::GpsInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "learning_veddha/GpsInfo";
  }

  static const char* value(const ::learning_veddha::GpsInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::learning_veddha::GpsInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"Header header\n"
"\n"
"uint8 status\n"
"\n"
"float64 Vx\n"
"float64 Vy\n"
"float64 Vz\n"
"float64 Vv\n"
"float64 Heading\n"
"float64 Pitch\n"
"float64 Roll\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::learning_veddha::GpsInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::learning_veddha::GpsInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.status);
      stream.next(m.Vx);
      stream.next(m.Vy);
      stream.next(m.Vz);
      stream.next(m.Vv);
      stream.next(m.Heading);
      stream.next(m.Pitch);
      stream.next(m.Roll);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GpsInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::learning_veddha::GpsInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::learning_veddha::GpsInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "Vx: ";
    Printer<double>::stream(s, indent + "  ", v.Vx);
    s << indent << "Vy: ";
    Printer<double>::stream(s, indent + "  ", v.Vy);
    s << indent << "Vz: ";
    Printer<double>::stream(s, indent + "  ", v.Vz);
    s << indent << "Vv: ";
    Printer<double>::stream(s, indent + "  ", v.Vv);
    s << indent << "Heading: ";
    Printer<double>::stream(s, indent + "  ", v.Heading);
    s << indent << "Pitch: ";
    Printer<double>::stream(s, indent + "  ", v.Pitch);
    s << indent << "Roll: ";
    Printer<double>::stream(s, indent + "  ", v.Roll);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEARNING_VEDDHA_MESSAGE_GPSINFO_H
