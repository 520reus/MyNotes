#include <ros/ros.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <pthread.h>
#include <signal.h>
#include "geometry_msgs/Twist.h"

#include "controlcan.h"
#include <crss_vdcar/ChassisCtrl.h>
#include "crss_vdcar/CanCtrlInfo.h"
#include "crss_vdcar/AckermannDrive.h"
#include "crss_vdcar/AckermannDriveStamped.h"

#define msleep(ms)  usleep((ms)*1000)
#define min(a,b)  (((a) < (b)) ? (a) : (b))

#define MAX_CHANNELS  2
#define CHECK_POINT  200
#define RX_WAIT_TIME  100
#define RX_BUFF_SIZE  1000

double  D   = 241.3/1000;
double  lLeftRtight = 602.8/1000;
double  lFrontRear  = 981.215/1000;
double  lturnFR     = 427.0/1000;
/* data from odom */
int16_t velLeft  =  0;
int16_t velRight =  0;
double  ownVEL1   = 0;
double  ownVEL2   = 0;
double  ownVEL3   = 0;
int16_t ownANGLE  = 0;
double  ownangle  = 0;
double  ownW      = 0;
double  ownW2     = 0;

int f_IDPrecep  = 0x31;
int f_IDControl = 0x21;

int flag_cmd = 0;
int flag_ack = 0;
int flag_obstacle =0;

#define N  30
double  buff[N]   = {0};
int     i         = 0;
double  sum       = 0;
int k_left        = 1;
int k_right       = 1;
/* ctrl from planner */
double  VelFirst = 0;
int16_t VelLast  = 0;
double  AngleFirst1 = 0;
double  AngleFirst2 = 0;
int16_t AngleLast   = 0;

typedef struct {
    unsigned channel;   // channel index, 0~2
    unsigned stop;      // stop RX-thread
    unsigned total;     // total received
    unsigned error;     // error(s) detected
} RX_CTX;

unsigned gDevType = 0;
unsigned gDevIdx = 0;
unsigned gChMask = 0;
unsigned gBaud = 0;
unsigned gTxType = 0;
unsigned gTxSleep = 0;
unsigned gTxFrames = 0;
unsigned gTxCount = 0;
char msg[8] =  { 0 };

RX_CTX rx_ctx[MAX_CHANNELS];
pthread_t rx_threads[MAX_CHANNELS];

unsigned s2n(const char *s)
{
    unsigned l = strlen(s);
    unsigned v = 0;
    unsigned h = (l > 2 && s[0] == '0' && (s[1] == 'x' || s[1] == 'X'));
    unsigned char c;
    unsigned char t;
    if (!h) return atoi(s);
    if (l > 10) return 0;
    for (s += 2; c = *s; s++)
    {
        if (c >= 'A' && c <= 'F') c += 32;
        if (c >= '0' && c <= '9') t = c - '0';
        else if (c >= 'a' && c <= 'f') t = c - 'a' + 10;
        else return 0;
        v = (v << 4) | t;
    }
    return v;
}

void generate_frame(VCI_CAN_OBJ *can, unsigned int frame_id, char* data, BYTE len)
{
    memset(can, 0, sizeof(VCI_CAN_OBJ));
    can->SendType = gTxType;
    can->DataLen = len;

    for (unsigned int i = 0; i < can->DataLen; i++) {
        can->Data[i] = data[i] & 0xff;
    }
    
    can->ID = frame_id;
    can->ExternFlag = 0;
    can->RemoteFlag = 0;
    
    if (!can->ExternFlag)
        return;
    can->ID |= can->ID << 11; // id: bit11~bit21 == bit0~bit10
    can->ID |= can->ID << 11; // id: bit22~bit28 == bit0~bit7
}

int can_transmit(int channel, unsigned int frame_id, char* data, BYTE len)
{
    VCI_CAN_OBJ *buff = (VCI_CAN_OBJ *)malloc(sizeof(VCI_CAN_OBJ));

    if ((gChMask & (1 << channel)) == 0) {
        ROS_WARN("chanel %d is masked", channel);
        free(buff);
        return -1;
    }

    generate_frame(buff, frame_id, data, len);

    int cnt = VCI_Transmit(gDevType, gDevIdx, channel, buff, 1);
    if (cnt != 1) {
        ROS_ERROR("CAN%d TX failed: ID=%08x", channel, buff->ID);
        free(buff);
        return -1;
    }

    free(buff);
    return 1;
}

int verify_frame(VCI_CAN_OBJ *can)
{
    if (can->DataLen > 8) return 0; // error: data length
    unsigned bcc = 0;
    unsigned i;
    for (i = 0; i < can->DataLen; i++)
        bcc ^= can->Data[i];
    if ((can->ID & 0xff) != bcc) return 0; // error: data checksum
    if (((can->ID >> 8) & 7) != (can->DataLen - 1)) return 0; // error: data length
    if (!can->ExternFlag) return 1; // std-frame ok
    if (((can->ID >> 11) & 0x7ff) != (can->ID & 0x7ff)) return 0; // error: frame id
    if (((can->ID >> 22) & 0x7f) != (can->ID & 0x7f)) return 0; // error: frame id
    return 1; // ext-frame ok
}

void * rx_thread(void *data)
{
    RX_CTX *ctx = (RX_CTX *)data;
    ctx->total = 0; // reset counter

    VCI_CAN_OBJ can[RX_BUFF_SIZE]; // buffer
    int cnt; // current received
    int i;

    unsigned check_point = 0;
    while(!ctx->stop && !ctx->error)
    {
        cnt = VCI_Receive(gDevType, gDevIdx, ctx->channel, can, RX_BUFF_SIZE, RX_WAIT_TIME);
        // no data received
        if (!cnt) {
            continue;
        }
        
        // verify frame
        for (i = 0; i < cnt; i++) {
            if (verify_frame(&can[i]))
                continue;
            printf("CAN%d: verify_frame() failed\n", ctx->channel);
            ctx->error = 1;
            break;
        }
        if (ctx->error) break;

        // TODO: parse can packets
        for (i = 0; i < cnt; ++i) {
            ROS_INFO("frame_id: 0x%04X", can[i].ID);
            if( can[i].ID = f_IDPrecep ){
                /* right -> positive */
                velLeft = ((can[i].Data[0] << 8) & 0xff00) | can[i].Data[1];
                velRight = ((can[i].Data[2] << 8) & 0xff00) | can[i].Data[3];
                ownVEL1 = (double)(velLeft+velRight)/2;          //RPM
                ownVEL2 = (ownVEL1*M_PI*D)/60.0;                 //m/s
                /* left -> positive */
                ownANGLE = (((can[i].Data[4] << 8) & 0xff00) | can[i].Data[5]);
                ownangle = (double)ownANGLE/100;                 //degree
                double test = ownangle*M_PI/180.0;               //rad
                if (flag_ack == 1){
                    if(test<0){
                        double r = lFrontRear/tan(-test);
                        double R = r - lLeftRtight/2;
                        ownW = ownVEL2/R;             
                    };
                    if(test>0){
                        double r = lFrontRear/tan(test);
                        double R = r + lLeftRtight/2;
                        ownW = -ownVEL2/R;              
                    };
                }
                else{
                    if(test>0){
                        test = test*k_left;
                    };
                    if(test<0){
                        test = test*k_right;
                    }; 
                    ownW = tan(test)*ownVEL2/lFrontRear;
                }
            }
        }

        /* differ left -> positive */
        ownW2 = (velRight-velLeft)/lLeftRtight;
 
        // print statistic info
        ctx->total += cnt;
        if (ctx->total / CHECK_POINT >= check_point) {
            printf("CAN%d: %d frames received & verified\n", ctx->channel, ctx->total);
            check_point++;
        }
    }

    printf("CAN%d RX thread terminated, %d frames received & verified: %s\n",
        ctx->channel, ctx->total, ctx->error ? "error(s) detected" : "no error");

    pthread_exit(0);
}

int init_device()
{
    gDevType = 4;
    gDevIdx = 0;
    gChMask = 3;
    gTxType = 1;
    gBaud = 0x1400;
    gTxSleep = 10;
    gTxFrames = 1;
    gTxCount = 1000;
    printf("DevType=%d, DevIdx=%d, ChMask=0x%x, Baud=0x%04x, TxType=%d, TxSleep=%d, TxFrames=0x%08x(%d), TxCount=0x%08x(%d)\n",
        gDevType, gDevIdx, gChMask, gBaud, gTxType, gTxSleep, gTxFrames, gTxFrames, gTxCount, gTxCount);
    
    if (!VCI_OpenDevice(gDevType, gDevIdx, 0)) {
        printf("VCI_OpenDevice failed\n");
        return -1;
    }
    printf("VCI_OpenDevice succeeded\n");

    VCI_INIT_CONFIG config;
    config.AccCode = 0;
    config.AccMask = 0xffffffff;
    config.Filter = 1;
    config.Mode = 0;
    //config.Timing0 = gBaud & 0xff;
    //config.Timing1 = gBaud >> 8;
    config.Timing0 = 0x14;
    config.Timing1 = 0x14;

    int i, j;
    for (i = 0; i < MAX_CHANNELS; i++)
    {
        if ((gChMask & (1 << i)) == 0) {
            printf("masked\n");
            continue;

        }
        if (!VCI_InitCAN(gDevType, gDevIdx, i, &config))
        {
            printf("VCI_InitCAN(%d) failed\n", i);
            return -1;
        }
        printf("VCI_InitCAN(%d) succeeded\n", i);

        if (!VCI_StartCAN(gDevType, gDevIdx, i))
        {
            printf("VCI_StartCAN(%d) failed\n", i);
            return -1;
        }
        printf("VCI_StartCAN(%d) succeeded\n", i);
    }

    for (i = 0; i < MAX_CHANNELS; i++)
    {
        if ((gChMask & (1 << i)) == 0) continue;

        rx_ctx[i].channel = i;
        rx_ctx[i].stop = 0;
        rx_ctx[i].total = 0;
        rx_ctx[i].error = 0;

        pthread_create(&rx_threads[i], NULL, rx_thread, &rx_ctx[i]);
    }

    return 0;
}

int uninit_device()
{
    for (int i = 0; i < MAX_CHANNELS; i++) {
        if ((gChMask & (1 << i)) == 0) continue;

        rx_ctx[i].stop = 1;
        pthread_join(rx_threads[i], NULL);
        if (rx_ctx[i].error) {
            ROS_ERROR("can error occure when receiving packets");
        }
    }

    VCI_CloseDevice(gDevType, gDevIdx);
    printf("VCI_CloseDevice\n");
    return 0;
}

void SigintHandler(int sig)
{
    uninit_device();
    ROS_INFO("shutting down!");
    ros::shutdown();
}

void cmd_chatterCallback(const geometry_msgs::Twist msg)
{
	VelFirst     = msg.linear.x;                     //m/s
	AngleFirst1  = -msg.angular.z;//move_base angle  //rad

	// if (VelFirst < 0) 
        // {	
	// 	AngleFirst1  = msg.angular.z;
	// }
	flag_cmd = 1;
	ROS_INFO("[cmd_vel] VEL: %f ANGLE: %f", VelFirst, AngleFirst1);
}

void ark_chatterCallback(const  crss_vdcar::AckermannDriveStamped msg)
{
	VelFirst     = msg.drive.speed;                     	    //m/s
	AngleFirst1  = -msg.drive.steering_angle;//move_base angle  //rad
	flag_ack = 1;
}

void control_chatterCallback(const  crss_vdcar::ChassisCtrl msg)
{
	if(msg.obstacle){
		flag_obstacle = 1;
	}
	if(!msg.obstacle){
		flag_obstacle = 0;
	}
}

void send_cmd(int16_t rpm, int16_t angle, char msg[8])
{
	msg[0] = (rpm >> 8) & 0xFF;
	msg[1] = rpm & 0xFF;
	msg[2] = (angle >> 8) & 0xFF;
	msg[3] = angle & 0xFF;

	//printf("send_cmd : start %i\n" , rpm);
}

double filter(double vel_get)
{
	sum = 0;
	buff[i++] = vel_get;
	if(i==N) i=0;
	for(int count=0;count<N;count++)
	sum += buff[count];
	return sum/N; 
}

int main(int argc, char** argv)
{
    ros::init(argc, argv, "can_node");
    ros::NodeHandle nh;
    ros::Subscriber control_sub_ = nh.subscribe("/chassis_ctrl", 100, control_chatterCallback);
    ros::Subscriber cmd_vel_sub_ = nh.subscribe("/cmd_vel", 100, cmd_chatterCallback);// getW  velH   topic cmd_vel 
    ros::Subscriber ark_vel_sub_ = nh.subscribe("/navigation", 100, ark_chatterCallback);
    ros::Publisher  wheel_pub_   = nh.advertise<geometry_msgs::Twist>("/wheel/data", 100);
    ros::Rate loop_rate(2);
    ROS_INFO("can node start...");

    int res = 0;  

	ros::Time current_time, last_time;
	current_time = ros::Time::now();
	last_time    = ros::Time::now();
    // register handler on exit 
	signal(SIGINT, SigintHandler);

    res = init_device();
    if (res) {
        ROS_INFO("failed to init can device...");
        uninit_device();
        return -1;
    }

    unsigned int frame_id_wheel = 0x21;
    unsigned int frame_id_chassis = 0x10;

    while (nh.ok()) 
    {
        ros::spinOnce();
		geometry_msgs::Twist  velpubwheel;
		/* left -> positive */
		ownVEL3 = filter(ownVEL2);             //m/s
		velpubwheel.linear.x  = ownVEL2;       //m/s
		velpubwheel.linear.y  = ownVEL3;       /* filter */		
		velpubwheel.angular.z = ownW;          //rad/s
		velpubwheel.angular.y = ownW2;         /* differ */
		
		wheel_pub_.publish(velpubwheel);
        ownVEL2=ownVEL3=ownW=ownW2=0;

        /* right -> positive */
        if ( flag_cmd == 1 ) {
            /* rad 2 degree */
            AngleFirst2 = AngleFirst1 * 180.0 / M_PI;
            AngleLast = (int16_t)(AngleFirst2 * 100);
        }
        else if ( flag_ack == 1 ){
            /* rad 2 degree */
            AngleFirst2 = AngleFirst1 * 180.0 / M_PI / 5;
            AngleLast = (int16_t)(AngleFirst2*100);
        }
        
        /* m/s 2 rpm */
        VelLast = VelFirst * 60 / (M_PI * D); 
    
        //VelLast = 10;
        //AngleLast = 10;
        if (AngleLast >= 3000) {
            AngleLast = 3000;
        }
        else if (AngleLast <= -3000) {
            AngleLast = -3000;
        }
        /* no forward */
        if (flag_obstacle == 1) {
            if(VelLast>0)VelLast = 0;
            /* for rtk_car */
            VelLast = 0;
            AngleLast = 0;
        }

        send_cmd(VelLast, AngleLast, msg);
        BYTE len = sizeof(msg);	
        //channel_0
        res = can_transmit(0, frame_id_wheel, msg, len);
        if (!res) {
            ROS_ERROR("failed to send can packet");
        }
        //channel_1
        // res = can_transmit(1, frame_id_chassis, msg, len);
        // if (!res) {
        //     ROS_ERROR("failed to send can packet");
        // }
        flag_cmd=flag_ack=0;
        memset(msg, 0, sizeof(msg));

        ros::spinOnce();
		loop_rate.sleep();
    }

    ROS_INFO("can node shutdown...");
    uninit_device();
    ros::shutdown();

    return 0;
}